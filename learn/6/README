Condition variables issue in multithreading:
-------------------------------------------

The condition variable is a problem arise when a mutex lock is used between
multiple threads and at some moment, one thread waits for the lock and other
waits for a variable to get a specific value (which can be done only when it has
the same lock). Its a kind of deadlock situation, where both the threads are
stuck in execution.

Lets take an example (condition_variable_problem.c).

Suppose there is a global variable 'flag', which is accessed by two threads T1
and T2.

At staring, this flag is FALSE.
    - T1 is just looking for this flag to become TRUE(1) to proceed with its
      job.

    - T2 is responsible to make this flag as TRUE (1).

When the program starts, and both the threads are created, lets assume that
execution first goes in the T1 (its not mandatory, as it all depends on OS
thread scheduling, that which threads it will execute first, but with a sleep
after first thread creation, we are fooling OS to start the T1 first).

Once T1 is created, we have two threads now, 'T1' and the 'main thread'.
Due to sleep in the 'main thread', execution goes in the T1 first, T1 takes the
lock and keep waiting for the flag to become TRUE(1).

At some time context switch happens and execution goes to the 'main thread', and
now 'main thread' creates another thread (T2).

Once the execution reaches the T2 thread, it waits for the lock to be released,
because lock has been already taken by the thread T1.

Now, if the execution switches to the thread T1, here code is not releasing
the lock, because flag is not 1 (TRUE).

Meaning, thread T1 can't release the lock before the flag becomes TRUE, and
thread T2 can't make the flag TRUE, until the lock is released.

Here, Both the threads are blocked, and can't proceed.

This situation is called an issue of condition variable in multithreaded
programs.

If you try compile and run this program, you will see the below output:

[ ] gcc condition_variable_problem.c -lpthread
[ ] ./a.out
T1 : Waiting for flag to become TRUE.
T1 : Waiting for flag to become TRUE.
T2 : Trying to take the lock.
T1 : Waiting for flag to become TRUE.
T1 : Waiting for flag to become TRUE.
T1 : Waiting for flag to become TRUE.
T1 : Waiting for flag to become TRUE.
T1 : Waiting for flag to become TRUE.
T1 : Waiting for flag to become TRUE.

See, in the above output, first execution goes in the T1, and waits for flag to
become TRUE, and then once the execution goes to T2, it just starts waiting for
the lock with 'pthead_mutex_lock' call, and not coming out as T1 never releases
the lock and T2 is just waiting for flag to become TRUE to release the lock.

Solution with thread API's:
---------------------------

To solve the above issue, POSIX thread API's provide below api's.

    1. pthread_cond_wait
    2. pthread_cond_signal

Here, in this example, when T1 has first taken the lock and waiting for flag to
become TRUE, other threads can not take this lock, and hence, cant make the flag
as TRUE.

To solve this issue, just after checking the flag in the while loop, we can use
the thread api, 'pthread_cond_wait', which puts the thread in sleep state and
release the lock for others to take it, and make the changes to the 'flag'.

This thread gets back to the running state only when other thread release the
lock and sends back a signal. At this point T1 get the lock again, goes back to
the loop condition, and see whether the 'flag' has become TRUE or not.

If its true, it comes out of the loop and does its operation.

In the other thread (T2), when it was waiting for the lock, it gets the lock
because 'pthread_cond_wait' made T1 to sleep and freed the lock. Now, once T2
gets the lock, it changes the value of the flag as 'TRUE', release the lock
and sends back the signal (using pthread_cond_signal) to the thread(T1), who
sent the wait notification.

This way, we can avoid the deadlock occurred due to mutex and condition
variable.

[ ] gcc condition_variable_solution.c -lpthread
[ ] ./a.out
T1 : Waiting for flag to become TRUE.
T2 : Trying to take the lock.
T2 : Got the lock. Making flag as TRUE.
T1 : Processing done.
