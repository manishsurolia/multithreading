Reference : 'The Little Book of Semaphores' by 'Allen B. Downey'

Dining philosophers:
-------------------

A round table with five plates, five forks (or chopsticks) and a big bowl of
spaghetti. Five philosophers, who represent interacting threads, come to the
table and execute the following loop:

Basic philosopher loop:

while True:
    think()
    get_forks()
    eat()
    put_forks()

The forks represent resources that the threads have to hold exclusively in
order to make progress. The thing that makes the problem interesting,
unrealistic, and unsanitary, is that the philosophers need two forks to eat, so
a hungry philosopher might have to wait for a neighbor to put down a fork.

Assume that the philosophers have a local variable i that identifies each
philosopher with a value in (0..4). Similarly, the forks are numbered from 0 to
4, so that Philosopher i has fork i on the left and fork i + 1 on the right.

Assuming that the philosophers know how to think and eat, our job is to write a
version of get forks and put forks that satisfies the following constraints:

• Only one philosopher can hold a fork at a time.
• It must be impossible for a deadlock to occur.
• It must be impossible for a philosopher to starve waiting for a fork.
• It must be possible for more than one philosopher to eat at the same time.

The last requirement is one way of saying that the solution should be efficient;
that is, it should allow the maximum amount of concurrency.

The solution implemented here, just makes sure the first constraint.
• Only one philosopher can hold a fork at a time.

In the program, Each fork is represented by a mutex. Means, if one philosopher
has taken this fork, no other philosopher can take it until the earlier one
releases it.

#define MAX 5

sem_t forks[MAX]

forks[0], forks[1], forks[2], forks[3], forks[4] are the forks.

philosopher0 takes forks[0] and forks[1]
philosopher1 takes forks[1] and forks[2]
philosopher2 takes forks[2] and forks[3]
philosopher3 takes forks[3] and forks[4]
philosopher4 takes forks[4] and forks[0]

Means,

philosopher(i) takes forks[i] and forks[(i+1) % MAX]

Go through the complete program to understand it and try to see how a deadlock
can occur with this implementation.

One simple way by which there can be a deadlock is that suppose each thread/
philosopher take his left fork, keep waiting for the right one to be free.

We will discuss the solution to this deadlock situation in the further
implementation.

Try to compile and run this program and see the deadlock and find out what
sequence caused this deadlock..
