Readers and writers execute different code before entering the critical section.
The synchronization constraints are:

1. Any number of readers can be in the critical section simultaneously.
2. Writers must have exclusive access to the critical section.

In other words, a writer cannot enter the critical section while any other
thread (reader or writer) is there, and while a writer is there, no other
thread may enter.

The exclusion pattern here might be called categorical mutual exclusion. A
thread in the critical section does not necessarily exclude other threads, but
the presence of one category in the critical section excludes other categories.

Puzzle: Use semaphores to enforce these constraints, while allowing readers and
writers to access the data structure, and avoiding the possibility of deadlock.

Patterns similar to this reader code are common: the first thread into a section
locks a semaphore (or queues) and the last one out unlocks it. In fact, it is so
common we should give it a name and wrap it up in an object.

The name of the pattern is Light-switch, by analogy with the pattern where the
first person into a room turns on the light (locks the mutex) and the last one
out turns it off (unlocks the mutex).

[ ] gcc reader_writer.c -lpthread
[ ] ./a.out
Reader5 : Read value from buffer : 0
Reader5 : Read value from buffer : 0
Reader4 : Read value from buffer : 0
Reader4 : Read value from buffer : 0
Reader3 : Read value from buffer : 0
Reader3 : Read value from buffer : 0
Reader2 : Read value from buffer : 0
Reader2 : Read value from buffer : 0
Reader1 : Read value from buffer : 0
Reader1 : Read value from buffer : 0
Writer2 : Written value to buffer : 83
Writer2 : Written value to buffer : 86
Writer1 : Written value to buffer : 77
Writer1 : Written value to buffer : 15

For simplicity, I have used only two writers in this example, and there are five
readers.

As you can see the output above it works fine. Check the code for complete
details.

Starvation for writers:
----------------------

If a writer arrives while there are readers in the critical section, it might
wait in queue forever while readers come and go. As long as a new reader arrives
before the last of the current readers departs, there will always be at least
one reader in the room.

A program like this might work as long as the load on the system is low, because
then there are plenty of opportunities for the writers. But as the load
increases the behavior of the system would deteriorate quickly (at least from
the point of view of writers).

We will talk about this in the next section of reader_writers synchronization.
