Puzzle: Generalize the signal pattern so that it works both ways. Thread A has
to wait for Thread B and vice versa. In other words, given this code

            Thread A        |                Thread B
       -------------------------------------------------
          statement a1      |              statement b1
          statement a2      |              statement b2


We want to guarantee that a1 happens before b2 and b1 happens before a2. In
writing your solution, be sure to specify the names and initial values of your
semaphores.

Your solution should not enforce too many constraints. For example, we donâ€™t
care about the order of a1 and b1. In your solution, either order should be
possible.

Solution: To solve this issue, we just need 2 semaphores, (one for a1 finish,
and one for b1 finish), and initialize them to 0. Initialize to 0, because we
don't want any thread to proceed without other thread sending signal that the
first statement is done.

Check rendezvous.c for the solution.

[ ] gcc rendezvous.c -lpthread
[ ] ./a.out
statement a1
statement b1
statement b2
statement a2

Note 1 : The below solution also works fine, but not efficient because it will
cause more switches between threads.

void * thread_a_func(void *args)
{
    printf("statement a1\n");
    sem_wait(&b1done);
    sem_post(&a1done);
    printf("statement a2\n");
}

void * thread_b_func(void *args)
{
    printf("statement b1\n");
    sem_post(&b1done);
    sem_wait(&a1done);
    printf("statement b2\n");
}

Note 2 : Below is clearly a deadlock situation. Find it yourself.

void * thread_a_func(void *args)
{
    printf("statement a1\n");
    sem_wait(&b1done);
    sem_post(&a1done);
    printf("statement a2\n");
}

void * thread_b_func(void *args)
{
    printf("statement b1\n");
    sem_wait(&a1done);
    sem_post(&b1done);
    printf("statement b2\n");
}
