This section represents the code just like the last example, where semaphores
were used to use queue between one producer and one consumer thread.

This example has been extended to use then same queue between multiple producers
and multiple consumers.

Note : Since, now we have multiple producers, we need to have some kind of lock
mechanism, otherwise will be race conditions between multiple
writers(producers).

For this lock also, we have just used semaphore as a 'binary semaphore' or a
lock.

Lets compile and run this program.

[ ] gcc queue.c -lpthread
[ ] ./a.out
P1 : Written value to buffer : 0
C1 : Read value from buffer : 0
P1 : Written value to buffer : 1
C2 : Read value from buffer : 1
P1 : Written value to buffer : 2
C1 : Read value from buffer : 2
P1 : Written value to buffer : 3
C2 : Read value from buffer : 3
P1 : Written value to buffer : 4
C1 : Read value from buffer : 4
P2 : Written value to buffer : 0
P2 : Written value to buffer : 1
C1 : Read value from buffer : 0
C1 : Read value from buffer : 1
P2 : Written value to buffer : 2
P2 : Written value to buffer : 3
C1 : Read value from buffer : 2
C1 : Read value from buffer : 3
P2 : Written value to buffer : 4
P2 : Written value to buffer : 5
C2 : Read value from buffer : 4
P1 : Written value to buffer : 5
C1 : Read value from buffer : 5
C1 : Read value from buffer : 5
P2 : Written value to buffer : 6
P2 : Written value to buffer : 7
C1 : Read value from buffer : 6
C1 : Read value from buffer : 7
P2 : Written value to buffer : 8
P2 : Written value to buffer : 9
C2 : Read value from buffer : 8
C2 : Read value from buffer : 9
P1 : Written value to buffer : 6
P1 : Written value to buffer : 7
C1 : Read value from buffer : 6
C2 : Read value from buffer : 7
P1 : Written value to buffer : 8
P1 : Written value to buffer : 9
C1 : Read value from buffer : 8
C1 : Read value from buffer : 9

here, you can see that the sequence of the write and read are correct (as per
a queue). Hence, the implementation is working fine.
