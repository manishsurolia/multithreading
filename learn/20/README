This section is in continuration with the last one, where it was shown that if
condition variable API's are used without any condition variable, we may face
issues due to changes in the order or threads execution.

If we use a condition variable and use the condition variable API's around that
our code will not behave wrongly due to different order of execution for the
threads.

Lets consider both the cases again,

(1) case1 : T1 starts first, it takes the lock, checks for the 'flag', does not
find it TRUE, so calls the wait(because it wants other thread to make the flag
as TRUE), and goes to sleep. Now, T2 starts, takes the lock(because lock was
freed by T1 by calling 'wait'), make the flag as TRUE, then release the lock and
send signal back to T1. Now, T1 will wake up take the lock, again check the flag
in the while loop, this time it will find the flag as TRUE and will come out of
the while loop to finish its remaining tasks.

In this case, we are good. Everything goes very nicely.

(2) case2 : Now, lets take another case. Assume that T2 starts first instead of
T1. Hence, the sequence will be,

T2 starts first, takes the lock, makes the flag as TRUE (which is required for
T1 to proceed), then release the lock and send back the signal. Though, there
is no one  to take the signal as T1 has not started yet.

Now, T1 starts, it checks for the lock and finds it already TRUE, so it need not
call 'wait', so T1 proceeds further without going in the while loop.

In this case also, we are good. Everything goes very nicely.

There are 2 programs written based on the above cases to reflect that if we use
condition variable thread API's with a condition variable, sequence of the
threads execution does not matter and we get correct behaviour.

[ ] gcc case1.c -lpthread
[ ] ./a.out
T1 : Calling wait to release lock and sleep.
T2 : Trying to acquire lock.
T2 : Acquired lock. Making flag as TRUE. Returning.
T1 : Got signal from the other thread. Rechecking the flag.

[ ] gcc case2.c -lpthread
[ ] ./a.out
T2 : Trying to acquire lock.
T2 : Acquired lock. Making flag as TRUE. Returning. - No sysetm hang now.
